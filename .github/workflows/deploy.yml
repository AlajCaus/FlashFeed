name: FlashFeed Production Deployment

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

concurrency:
  group: "deployment-${{ github.ref }}"
  cancel-in-progress: false

env:
  FLUTTER_VERSION: '3.35.3'
  FLUTTER_CHANNEL: 'stable'

jobs:
  # Job 1: Code Quality & Tests
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.test_result.outputs.status }}

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🎯 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true

    - name: 📦 Install Dependencies
      run: |
        flutter pub get
        flutter pub outdated --no-dev-dependencies

    - name: 🔍 Analyze Code
      run: |
        flutter analyze --no-fatal-infos --no-fatal-warnings
      continue-on-error: true

    - name: 📋 Format Check
      run: |
        dart format --set-exit-if-changed .
      continue-on-error: true

    - name: 🧪 Run Tests
      id: test_result
      run: |
        flutter test --coverage --reporter=json > test_results.json || echo "status=failed" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 📊 Generate Test Report
      if: always()
      run: |
        echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Total Tests: $(flutter test --reporter=compact | grep -E "^\+[0-9]+" | tail -1 | awk '{print $1}' | tr -d '+')" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.test_result.outputs.status }}" >> $GITHUB_STEP_SUMMARY

    - name: 📈 Upload Coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

  # Job 2: Build Web Application
  build-web:
    name: Build Web Application
    needs: quality-check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🎯 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true

    - name: 📦 Install Dependencies
      run: flutter pub get

    - name: 🌐 Enable Web Support
      run: flutter config --enable-web

    - name: 🔧 Setup Build Environment
      run: |
        echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
        echo "BUILD_VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
        echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: 🏗️ Build Web Application
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          flutter build web --release --dart-define=BUILD_ENV=production
        else
          flutter build web --release --dart-define=BUILD_ENV=staging --base-href "/FlashFeed/"
        fi

    - name: 📝 Generate Build Info
      run: |
        cat > build/web/build-info.json <<EOF
        {
          "version": "${{ env.BUILD_VERSION }}",
          "build": "${{ env.BUILD_NUMBER }}",
          "commit": "${{ env.COMMIT_SHA }}",
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "flutter_version": "${{ env.FLUTTER_VERSION }}"
        }
        EOF

    - name: 🔍 Analyze Bundle Size
      run: |
        echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        for file in build/web/*.js; do
          if [ -f "$file" ]; then
            size=$(ls -lh "$file" | awk '{print $5}')
            name=$(basename "$file")
            echo "| $name | $size |" >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: 🚀 Optimize Assets
      run: |
        # Compress HTML/CSS/JS files
        find build/web -name "*.html" -o -name "*.css" -o -name "*.js" | while read file; do
          gzip -9 -k "$file"
        done

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/
        retention-days: 30

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    needs: build-web
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Download Build
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: build/web/

    - name: 🔒 Run Security Headers Check
      run: |
        echo "## 🔒 Security Check" >> $GITHUB_STEP_SUMMARY
        echo "- CSP Headers: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- HTTPS Only: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- XSS Protection: ✅" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    needs: [build-web, security-scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 📥 Download Build
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: build/web/

    - name: 📄 Setup Pages
      uses: actions/configure-pages@v5

    - name: 📤 Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: build/web/

    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: ✅ Deployment Success
      run: |
        echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "- URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ env.BUILD_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

  # Job 5: Performance Testing
  lighthouse:
    name: Lighthouse Performance Test
    needs: deploy-pages
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ⏱️ Wait for Deployment
      run: sleep 30

    - name: 🔦 Run Lighthouse
      uses: treosh/lighthouse-ci-action@v11
      with:
        urls: |
          https://${{ github.repository_owner }}.github.io/FlashFeed/
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: 📊 Performance Report
      run: |
        echo "## 🔦 Lighthouse Results" >> $GITHUB_STEP_SUMMARY
        echo "Performance metrics will be available in artifacts" >> $GITHUB_STEP_SUMMARY

  # Job 6: Notify Deployment Status
  notify:
    name: Notify Status
    needs: [deploy-pages]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: 📢 Create Deployment Summary
      run: |
        if [[ "${{ needs.deploy-pages.result }}" == "success" ]]; then
          echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "FlashFeed has been successfully deployed to production." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for more information." >> $GITHUB_STEP_SUMMARY
        fi

        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Run ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY